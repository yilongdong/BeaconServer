input UserLoginInput {
    username: String!
    password: String!
    project: String!
}

type UserLoginOutput {
    id: String!
    username: String!
    role: Role!
    projectID: String!
    projectName: String!
}

input SortInput {
    take: Int!
    sort: String!
}

type SeriesItem {
    name: String!
    value: Int!
}

type Query {
    users: [User]!
    user(id: String!): User
    login(userLoginInput: UserLoginInput!): UserLoginOutput
    topFile(projectID: String!, sortInput: SortInput!): [SeriesItem!]!
    projects: [Project]!
    project(id: String!): Project
    functions: [Function]!
    function(id: String!): Function
    files: [File]!
    file(id: String!): File
    classes: [Class]!
    class(id: String!): Class
}

type Mutation {
    createUser(createUserInput: CreateUserInput!): User!
    updateUser(updateUserInput: UpdateUserInput!): User!
    removeUser(id: Int!): User
    createProject(createProjectInput: CreateProjectInput!): Project!
    updateProject(updateProjectInput: UpdateProjectInput!): Project!
    removeProject(id: Int!): Project
    createFunction(createFunctionInput: CreateFunctionInput!): Function!
    updateFunction(updateFunctionInput: UpdateFunctionInput!): Function!
    removeFunction(id: Int!): Function
    createFile(createFileInput: CreateFileInput!): File!
    updateFileCLOC(updateFileCLOCInput: UpdateFileCLOCInput!): File!
    updateFileCYCLO(updateFileCYCLOInput: UpdateFileCYCLOInput!): File!
    updateFileGitCommits(updateFileGitCommitsInput: UpdateFileGitCommitsInput!): File!
    updateFileInclusions(updateFileInclusionsInput: UpdateFileInclusionsInput!): File!
    removeFile(id: Int!): File
    createClass(createClassInput: CreateClassInput!): Class!
    updateClass(updateClassInput: UpdateClassInput!): Class!
    removeClass(id: Int!): Class
}

